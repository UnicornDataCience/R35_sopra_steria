import streamlit as st
import asyncio
import os
from datetime import datetime
from dotenv import load_dotenv
from langchain_openai import AzureChatOpenAI
from langchain.schema import HumanMessage, SystemMessage

# Cargar variables de entorno
load_dotenv()

# Configuraci√≥n de p√°gina
st.set_page_config(
    page_title="Chat B√°sico - Azure OpenAI",
    page_icon="üí¨",
    layout="wide"
)

# CSS
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        text-align: center;
        color: white;
    }
    
    .status-good { 
        color: #10b981; 
        font-weight: bold;
    }
    
    .status-error { 
        color: #ef4444; 
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

# Funci√≥n para inicializar Azure OpenAI
@st.cache_resource
def initialize_azure_llm():
    """Inicializa el cliente Azure OpenAI"""
    try:
        endpoint = os.getenv("AZURE_OPENAI_ENDPOINT")
        api_key = os.getenv("AZURE_OPENAI_API_KEY")
        deployment = os.getenv("AZURE_OPENAI_DEPLOYMENT", "gpt-4-TFM")
        api_version = os.getenv("AZURE_OPENAI_API_VERSION", "2024-12-01-preview")
        
        if not all([endpoint, api_key, deployment]):
            return None, "Configuraci√≥n Azure OpenAI incompleta"
        
        llm = AzureChatOpenAI(
            azure_deployment=deployment,
            azure_endpoint=endpoint,
            api_key=api_key,
            api_version=api_version,
            temperature=0.3,
            max_tokens=2000
        )
        
        return llm, "Conexi√≥n exitosa"
        
    except Exception as e:
        return None, f"Error: {str(e)}"

# Funci√≥n as√≠ncrona para generar respuesta
async def generate_response(llm, messages):
    """Genera respuesta usando Azure OpenAI"""
    try:
        response = await llm.ainvoke(messages)
        return response.content, None
    except Exception as e:
        return None, str(e)

# Funci√≥n para test de conexi√≥n
async def test_connection(llm):
    """Prueba la conexi√≥n con Azure OpenAI"""
    try:
        response = await llm.ainvoke("Di 'Test exitoso'")
        return response.content, None
    except Exception as e:
        return None, str(e)

# Inicializar estado
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []

if 'llm' not in st.session_state:
    llm, status = initialize_azure_llm()
    st.session_state.llm = llm
    st.session_state.connection_status = status

# Header
st.markdown("""
<div class="main-header">
    <h1>üí¨ Chat B√°sico con Azure OpenAI</h1>
    <p>Prueba directa de conexi√≥n sin agentes complejos</p>
</div>
""", unsafe_allow_html=True)

# Sidebar con informaci√≥n
with st.sidebar:
    st.title("üîß Estado del Sistema")
    
    # Estado de conexi√≥n
    if st.session_state.llm:
        st.markdown('<p class="status-good">‚úÖ Azure OpenAI Conectado</p>', unsafe_allow_html=True)
    else:
        st.markdown('<p class="status-error">‚ùå Azure OpenAI No Disponible</p>', unsafe_allow_html=True)
        st.error(st.session_state.connection_status)
    
    # Informaci√≥n de configuraci√≥n
    st.subheader("üìã Configuraci√≥n")
    endpoint = os.getenv("AZURE_OPENAI_ENDPOINT", "No configurado")
    deployment = os.getenv("AZURE_OPENAI_DEPLOYMENT", "No configurado")
    
    st.info(f"""
    **Endpoint:** {endpoint[:50]}...
    **Deployment:** {deployment}
    **Mensajes:** {len(st.session_state.chat_history)}
    """)
    
    # Bot√≥n de test
    if st.button("üß™ Test de Conexi√≥n", use_container_width=True):
        if st.session_state.llm:
            with st.spinner("Probando conexi√≥n..."):
                # Usar asyncio.run() para ejecutar funci√≥n as√≠ncrona
                result, error = asyncio.run(test_connection(st.session_state.llm))
                
                if result:
                    st.success(f"‚úÖ Test OK: {result}")
                else:
                    st.error(f"‚ùå Test fall√≥: {error}")
        else:
            st.error("No hay conexi√≥n para probar")
    
    # Reset
    if st.button("üîÑ Reiniciar Chat", use_container_width=True):
        st.session_state.chat_history = []
        st.rerun()

# √Årea principal de chat
st.subheader("üí¨ Conversaci√≥n")

# Mostrar mensajes
for message in st.session_state.chat_history:
    with st.chat_message(message["role"]):
        st.write(message["content"])
        if message.get("timestamp"):
            st.caption(f"üïí {message['timestamp']}")

# Input del usuario
if prompt := st.chat_input("Escribe tu mensaje..."):
    
    # Verificar conexi√≥n
    if not st.session_state.llm:
        st.error("‚ùå No hay conexi√≥n con Azure OpenAI. Verifica tu configuraci√≥n.")
        st.stop()
    
    # A√±adir mensaje del usuario
    user_message = {
        "role": "user",
        "content": prompt,
        "timestamp": datetime.now().strftime("%H:%M:%S")
    }
    st.session_state.chat_history.append(user_message)
    
    # Mostrar mensaje del usuario
    with st.chat_message("user"):
        st.write(prompt)
        st.caption(f"üïí {user_message['timestamp']}")
    
    # Generar respuesta
    with st.chat_message("assistant"):
        with st.spinner("üß† Generando respuesta..."):
            
            # Crear contexto de conversaci√≥n
            messages = [
                SystemMessage(content="""Eres un asistente m√©dico experto en datos sint√©ticos y an√°lisis cl√≠nico. 

Caracter√≠sticas:
- Especializado en COVID-19 y datos hospitalarios
- Conocimiento de SDV, CTGAN y generaci√≥n sint√©tica
- Comunicaci√≥n clara y profesional
- Respuestas concisas pero informativas

Responde de manera √∫til y orientada a la acci√≥n.""")
            ]
            
            # A√±adir historial reciente (√∫ltimos 5 mensajes de usuario)
            recent_history = st.session_state.chat_history[-6:-1]  # Excluir el √∫ltimo (que acabamos de a√±adir)
            for msg in recent_history:
                if msg["role"] == "user":
                    messages.append(HumanMessage(content=msg["content"]))
            
            # A√±adir mensaje actual
            messages.append(HumanMessage(content=prompt))
            
            # Generar respuesta usando asyncio.run()
            response_content, error = asyncio.run(
                generate_response(st.session_state.llm, messages)
            )
            
            if response_content:
                # Mostrar respuesta
                st.write(response_content)
                
                # A√±adir respuesta al historial
                assistant_message = {
                    "role": "assistant",
                    "content": response_content,
                    "timestamp": datetime.now().strftime("%H:%M:%S")
                }
                st.session_state.chat_history.append(assistant_message)
                
                st.caption(f"üïí {assistant_message['timestamp']}")
                
            else:
                # Manejar error
                error_msg = f"‚ùå Error generando respuesta: {error}"
                st.error(error_msg)
                
                # A√±adir error al historial
                st.session_state.chat_history.append({
                    "role": "assistant",
                    "content": error_msg,
                    "timestamp": datetime.now().strftime("%H:%M:%S")
                })

# Footer
st.markdown("---")
col1, col2 = st.columns(2)

with col1:
    st.caption("üß† **Azure OpenAI** - Test de conexi√≥n b√°sica")

with col2:
    st.caption("üí° **Tip:** Prueba preguntas sobre datos m√©dicos sint√©ticos")

# Mensajes de ayuda
if not st.session_state.chat_history:
    st.info("""
    **üí° Sugerencias para probar:**
    
    - `"¬øQu√© son los datos sint√©ticos m√©dicos?"`
    - `"Expl√≠came SDV y CTGAN"`
    - `"Genera un ejemplo de paciente COVID-19"`
    - `"¬øC√≥mo validar datos sint√©ticos?"`
    
    **üîß Si hay errores de conexi√≥n:**
    1. Verifica tu archivo .env
    2. Confirma que tu API key es v√°lida
    3. Usa el bot√≥n "Test de Conexi√≥n" en la barra lateral
    """)