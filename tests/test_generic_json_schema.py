#!/usr/bin/env python3
"""
Test del nuevo sistema gen√©rico de validaci√≥n JSON Schema
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import pandas as pd
import json
from src.validation.json_schema import (
    validate_medical_data, 
    detect_domain_from_data, 
    get_schema_for_domain,
    validate_json
)

def test_generic_json_schema():
    """Test del sistema gen√©rico de validaci√≥n JSON Schema"""
    
    print("üß™ Testing Generic JSON Schema System")
    print("=" * 50)
    
    # 1. Test detecci√≥n autom√°tica de dominio COVID
    print("\n1Ô∏è‚É£ Test detecci√≥n de dominio COVID")
    covid_data = [
        {
            "PATIENT ID": "P001",
            "EDAD/AGE": 45,
            "SEXO/SEX": "M",
            "DIAG ING/INPAT": "COVID-19",
            "FARMACO/DRUG_NOMBRE_COMERCIAL/COMERCIAL_NAME": "Dexamethasone",
            "UCI_DIAS/ICU_DAYS": 5,
            "TEMP_ING/INPAT": 38.5,
            "SAT_02_ING/INPAT": 92
        }
    ]
    
    detected_domain = detect_domain_from_data(covid_data)
    print(f"   üéØ Dominio detectado: {detected_domain}")
    assert detected_domain == "covid", f"Expected 'covid', got '{detected_domain}'"
    print("   ‚úÖ Detecci√≥n COVID correcta")
    
    # 2. Test detecci√≥n autom√°tica de dominio Cardiolog√≠a
    print("\n2Ô∏è‚É£ Test detecci√≥n de dominio Cardiolog√≠a")
    cardiology_data = [
        {
            "PATIENT ID": "P002",
            "EDAD/AGE": 60,
            "SEXO/SEX": "F",
            "DIAGNOSTICO": "Hipertensi√≥n",
            "MEDICAMENTO": "Enalapril",
            "PRESION_SISTOLICA": 140,
            "PRESION_DIASTOLICA": 90,
            "FRECUENCIA_CARDIACA": 75,
            "COLESTEROL_TOTAL": 220
        }
    ]
    
    detected_domain = detect_domain_from_data(cardiology_data)
    print(f"   üéØ Dominio detectado: {detected_domain}")
    assert detected_domain == "cardiology", f"Expected 'cardiology', got '{detected_domain}'"
    print("   ‚úÖ Detecci√≥n cardiolog√≠a correcta")
    
    # 3. Test detecci√≥n gen√©rica
    print("\n3Ô∏è‚É£ Test detecci√≥n gen√©rica")
    generic_data = [
        {
            "PATIENT ID": "P003",
            "EDAD/AGE": 30,
            "SEXO/SEX": "M",
            "DIAGNOSTICO": "Diabetes",
            "MEDICAMENTO": "Insulina"
        }
    ]
    
    detected_domain = detect_domain_from_data(generic_data)
    print(f"   üéØ Dominio detectado: {detected_domain}")
    assert detected_domain == "generic", f"Expected 'generic', got '{detected_domain}'"
    print("   ‚úÖ Detecci√≥n gen√©rica correcta")
    
    # 4. Test validaci√≥n COVID con esquema espec√≠fico
    print("\n4Ô∏è‚É£ Test validaci√≥n COVID con esquema espec√≠fico")
    covid_results = validate_medical_data(covid_data, "covid")
    print(f"   üìä Resultados: {covid_results['valid_count']}/{covid_results['total_count']} v√°lidos")
    print(f"   üìà Tasa de √©xito: {covid_results['success_rate']:.1f}%")
    assert covid_results['success_rate'] == 100.0, "COVID validation should be 100%"
    print("   ‚úÖ Validaci√≥n COVID exitosa")
    
    # 5. Test validaci√≥n cardiolog√≠a con esquema espec√≠fico
    print("\n5Ô∏è‚É£ Test validaci√≥n cardiolog√≠a con esquema espec√≠fico")
    cardiology_results = validate_medical_data(cardiology_data, "cardiology")
    print(f"   üìä Resultados: {cardiology_results['valid_count']}/{cardiology_results['total_count']} v√°lidos")
    print(f"   üìà Tasa de √©xito: {cardiology_results['success_rate']:.1f}%")
    assert cardiology_results['success_rate'] == 100.0, "Cardiology validation should be 100%"
    print("   ‚úÖ Validaci√≥n cardiolog√≠a exitosa")
    
    # 6. Test auto-detecci√≥n y validaci√≥n
    print("\n6Ô∏è‚É£ Test auto-detecci√≥n y validaci√≥n")
    mixed_data = covid_data + cardiology_data + generic_data
    
    # Validar cada tipo por separado con auto-detecci√≥n
    for i, (data, expected_domain) in enumerate([
        (covid_data, "covid"),
        (cardiology_data, "cardiology"), 
        (generic_data, "generic")
    ], 1):
        results = validate_medical_data(data)  # Sin especificar dominio
        detected = results['domain']
        print(f"   üîç Datos {i}: Detectado '{detected}', esperado '{expected_domain}'")
        assert detected == expected_domain, f"Expected '{expected_domain}', got '{detected}'"
    
    print("   ‚úÖ Auto-detecci√≥n funcionando correctamente")
    
    # 7. Test de esquemas
    print("\n7Ô∏è‚É£ Test obtenci√≥n de esquemas")
    covid_schema = get_schema_for_domain("covid")
    cardiology_schema = get_schema_for_domain("cardiology")
    generic_schema = get_schema_for_domain("generic")
    
    print(f"   üìã Esquema COVID tiene {len(covid_schema['properties'])} propiedades")
    print(f"   üìã Esquema cardiolog√≠a tiene {len(cardiology_schema['properties'])} propiedades")
    print(f"   üìã Esquema gen√©rico tiene {len(generic_schema['properties'])} propiedades")
    
    # Verificar campos espec√≠ficos
    assert "DIAG ING/INPAT" in covid_schema['properties'], "COVID schema missing COVID-specific field"
    assert "PRESION_SISTOLICA" in cardiology_schema['properties'], "Cardiology schema missing cardiology-specific field"
    
    print("   ‚úÖ Esquemas cargados correctamente")
    
    # 8. Test datos inv√°lidos
    print("\n8Ô∏è‚É£ Test datos inv√°lidos")
    invalid_data = [
        {
            "PATIENT ID": "P004",
            "EDAD/AGE": 150,  # Edad inv√°lida
            "SEXO/SEX": "X",  # Sexo inv√°lido
            "DIAGNOSTICO": "Test"
        }
    ]
    
    invalid_results = validate_medical_data(invalid_data, "generic")
    print(f"   üìä Resultados: {invalid_results['valid_count']}/{invalid_results['total_count']} v√°lidos")
    print(f"   üìà Tasa de √©xito: {invalid_results['success_rate']:.1f}%")
    print(f"   ‚ö†Ô∏è Errores encontrados: {len(invalid_results['errors'])}")
    
    # Deber√≠a tener errores
    assert invalid_results['success_rate'] < 100.0, "Invalid data should not pass validation"
    assert len(invalid_results['errors']) > 0, "Should have validation errors"
    
    print("   ‚úÖ Validaci√≥n de datos inv√°lidos funcionando")
    
    print("\nüéâ TODOS LOS TESTS PASARON EXITOSAMENTE")
    print("‚úÖ El sistema gen√©rico de validaci√≥n JSON Schema est√° funcionando correctamente")
    
    return True

if __name__ == "__main__":
    try:
        test_generic_json_schema()
        print("\nüèÜ SUCCESS: Generic JSON Schema system working correctly!")
    except Exception as e:
        print(f"\n‚ùå ERROR: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
