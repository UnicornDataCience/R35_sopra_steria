"""
Medical Column Selector - Sistema de Selecci√≥n Inteligente de Columnas
Permite al usuario seleccionar columnas para generaci√≥n sint√©tica con validaci√≥n m√©dica
"""

import pandas as pd
import streamlit as st
from typing import Dict, List, Tuple, Optional, Any
from dataclasses import dataclass
from enum import Enum
import logging

from .universal_dataset_detector import (
    UniversalDatasetDetector, DatasetType, ColumnType, ColumnMapping
)

logger = logging.getLogger(__name__)

class MedicalRequirement(Enum):
    """Requisitos m√©dicos m√≠nimos para generaci√≥n sint√©tica"""
    MANDATORY = "mandatory"  # Obligatorio
    RECOMMENDED = "recommended"  # Recomendado
    OPTIONAL = "optional"  # Opcional

@dataclass
class ColumnRequirement:
    """Definici√≥n de requisito de columna"""
    column_type: ColumnType
    requirement_level: MedicalRequirement
    description: str
    alternatives: List[str] = None  # Nombres alternativos aceptables

@dataclass
class ColumnSelection:
    """Selecci√≥n de columnas para generaci√≥n sint√©tica"""
    selected_columns: List[str]
    mandatory_fulfilled: bool
    missing_requirements: List[str]
    recommendations: List[str]
    quality_score: float

class MedicalColumnSelector:
    """Selector inteligente de columnas para datasets m√©dicos"""
    
    def __init__(self):
        self.detector = UniversalDatasetDetector()
        
        # Requisitos m√≠nimos por tipo de dataset
        self.medical_requirements = {
            DatasetType.COVID19: [
                ColumnRequirement(
                    ColumnType.PATIENT_ID, 
                    MedicalRequirement.MANDATORY,
                    "Identificador √∫nico del paciente"
                ),
                ColumnRequirement(
                    ColumnType.AGE, 
                    MedicalRequirement.MANDATORY,
                    "Edad del paciente"
                ),
                ColumnRequirement(
                    ColumnType.GENDER, 
                    MedicalRequirement.RECOMMENDED,
                    "G√©nero del paciente"
                ),
                ColumnRequirement(
                    ColumnType.DIAGNOSIS, 
                    MedicalRequirement.MANDATORY,
                    "Diagn√≥stico principal (COVID-19 relacionado)"
                ),
                ColumnRequirement(
                    ColumnType.VITAL_SIGN, 
                    MedicalRequirement.RECOMMENDED,
                    "Signos vitales (temperatura, saturaci√≥n O2, etc.)"
                ),
                ColumnRequirement(
                    ColumnType.LAB_RESULT, 
                    MedicalRequirement.OPTIONAL,
                    "Resultados de laboratorio (PCR, ant√≠genos)"
                )
            ],
            DatasetType.DIABETES: [
                ColumnRequirement(
                    ColumnType.PATIENT_ID, 
                    MedicalRequirement.MANDATORY,
                    "Identificador √∫nico del paciente"
                ),
                ColumnRequirement(
                    ColumnType.AGE, 
                    MedicalRequirement.MANDATORY,
                    "Edad del paciente"
                ),
                ColumnRequirement(
                    ColumnType.GENDER, 
                    MedicalRequirement.RECOMMENDED,
                    "G√©nero del paciente"
                ),
                ColumnRequirement(
                    ColumnType.DIAGNOSIS, 
                    MedicalRequirement.MANDATORY,
                    "Diagn√≥stico de diabetes (tipo 1, tipo 2, etc.)"
                ),
                ColumnRequirement(
                    ColumnType.LAB_RESULT, 
                    MedicalRequirement.RECOMMENDED,
                    "Resultados de glucosa, HbA1c, etc."
                ),
                ColumnRequirement(
                    ColumnType.MEDICATION, 
                    MedicalRequirement.OPTIONAL,
                    "Medicamentos para diabetes (insulina, metformina, etc.)"
                )
            ],
            DatasetType.GENERAL_MEDICAL: [
                ColumnRequirement(
                    ColumnType.PATIENT_ID, 
                    MedicalRequirement.MANDATORY,
                    "Identificador √∫nico del paciente"
                ),
                ColumnRequirement(
                    ColumnType.AGE, 
                    MedicalRequirement.MANDATORY,
                    "Edad del paciente"
                ),
                ColumnRequirement(
                    ColumnType.DIAGNOSIS, 
                    MedicalRequirement.MANDATORY,
                    "Diagn√≥stico principal o condici√≥n m√©dica"
                ),
                ColumnRequirement(
                    ColumnType.GENDER, 
                    MedicalRequirement.RECOMMENDED,
                    "G√©nero del paciente"
                )
            ]
        }
    
    def validate_medical_dataset(self, df: pd.DataFrame) -> Tuple[bool, List[str]]:
        """Valida si el dataset cumple requisitos m√≠nimos m√©dicos"""
        
        # Detectar tipo de dataset
        dataset_type = self.detector.detect_dataset_type(df)
        
        # Inferir columnas m√©dicas
        column_mappings = self.detector.infer_medical_columns(df)
        
        # Obtener requisitos para este tipo de dataset
        requirements = self.medical_requirements.get(
            dataset_type, 
            self.medical_requirements[DatasetType.GENERAL_MEDICAL]
        )
        
        validation_errors = []
        
        # Verificar requisitos obligatorios
        for req in requirements:
            if req.requirement_level == MedicalRequirement.MANDATORY:
                if not self._has_column_type(column_mappings, req.column_type):
                    validation_errors.append(
                        f"Falta columna obligatoria: {req.description} ({req.column_type.value})"
                    )
        
        # Verificar tama√±o m√≠nimo del dataset
        if len(df) < 50:
            validation_errors.append("Dataset muy peque√±o (m√≠nimo 50 filas para generaci√≥n sint√©tica)")
        
        # Verificar que no todas las columnas sean texto
        numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns
        if len(numeric_cols) < 2:
            validation_errors.append("Dataset debe tener al menos 2 columnas num√©ricas")
        
        is_valid = len(validation_errors) == 0
        return is_valid, validation_errors
    
    def generate_column_selection_interface(self, df: pd.DataFrame) -> ColumnSelection:
        """Genera interfaz Streamlit para selecci√≥n de columnas"""
        
        st.subheader("üîç Selecci√≥n de Columnas para Generaci√≥n Sint√©tica")
        
        # Detectar tipo de dataset y columnas
        dataset_type = self.detector.detect_dataset_type(df)
        column_mappings = self.detector.infer_medical_columns(df)
        
        st.info(f"**Tipo de Dataset Detectado:** {dataset_type.value.title()}")
        
        # Mostrar informaci√≥n del dataset
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Filas", len(df))
        with col2:
            st.metric("Columnas Totales", len(df.columns))
        with col3:
            st.metric("Columnas Num√©ricas", len(df.select_dtypes(include=['int64', 'float64']).columns))
        
        # An√°lisis autom√°tico de columnas
        st.subheader("üìã An√°lisis Autom√°tico de Columnas")
        
        # Crear categor√≠as de columnas
        categorized_columns = self._categorize_columns(column_mappings)
        
        # Mostrar recomendaciones autom√°ticas
        recommended_columns = self._get_recommended_columns(dataset_type, column_mappings, df)
        
        st.success(f"**Columnas Recomendadas Autom√°ticamente:** {len(recommended_columns)}")
        
        # Interfaz de selecci√≥n manual
        st.subheader("‚úÖ Selecci√≥n Manual de Columnas")
        
        selected_columns = []
        
        # Mostrar columnas por categor√≠a con checkboxes
        for category, columns in categorized_columns.items():
            if columns:
                st.write(f"**{category}:**")
                for col in columns:
                    mapping = column_mappings[col]
                    is_recommended = col in recommended_columns
                    
                    # Checkbox con informaci√≥n adicional
                    default_value = is_recommended
                    selected = st.checkbox(
                        f"{col} ({mapping.detected_type.value}) - Confianza: {mapping.confidence:.2f}",
                        value=default_value,
                        key=f"col_{col}",
                        help=f"Tipo: {mapping.data_type}, Valores √∫nicos: {mapping.unique_values}, Nulos: {mapping.null_percentage:.1f}%"
                    )
                    
                    if selected:
                        selected_columns.append(col)
        
        # Validar selecci√≥n
        validation_result = self._validate_selection(selected_columns, dataset_type, column_mappings)
        
        # Mostrar resultados de validaci√≥n
        if validation_result.mandatory_fulfilled:
            st.success("‚úÖ Selecci√≥n v√°lida para generaci√≥n sint√©tica")
        else:
            st.error("‚ùå Selecci√≥n incompleta")
            for missing in validation_result.missing_requirements:
                st.warning(f"‚ö†Ô∏è {missing}")
        
        # Mostrar recomendaciones
        if validation_result.recommendations:
            st.info("üí° **Recomendaciones:**")
            for rec in validation_result.recommendations:
                st.write(f"‚Ä¢ {rec}")
        
        # Score de calidad
        st.metric("Puntuaci√≥n de Calidad", f"{validation_result.quality_score:.2f}/1.0")
        
        return validation_result
    
    def _categorize_columns(self, column_mappings: Dict[str, ColumnMapping]) -> Dict[str, List[str]]:
        """Categoriza columnas por tipo detectado"""
        
        categories = {
            "Identificadores": [],
            "Demogr√°ficos": [],
            "Cl√≠nicos": [],
            "Laboratorio": [],
            "Medicamentos": [],
            "Fechas": [],
            "Otros": []
        }
        
        for col, mapping in column_mappings.items():
            if mapping.detected_type == ColumnType.PATIENT_ID:
                categories["Identificadores"].append(col)
            elif mapping.detected_type in [ColumnType.AGE, ColumnType.GENDER]:
                categories["Demogr√°ficos"].append(col)
            elif mapping.detected_type in [ColumnType.DIAGNOSIS, ColumnType.VITAL_SIGN]:
                categories["Cl√≠nicos"].append(col)
            elif mapping.detected_type == ColumnType.LAB_RESULT:
                categories["Laboratorio"].append(col)
            elif mapping.detected_type == ColumnType.MEDICATION:
                categories["Medicamentos"].append(col)
            elif mapping.detected_type == ColumnType.DATE:
                categories["Fechas"].append(col)
            else:
                categories["Otros"].append(col)
        
        return categories
    
    def _get_recommended_columns(self, dataset_type: DatasetType, column_mappings: Dict[str, ColumnMapping], df: pd.DataFrame) -> List[str]:
        """Obtiene columnas recomendadas autom√°ticamente"""
        
        recommended = []
        requirements = self.medical_requirements.get(
            dataset_type, 
            self.medical_requirements[DatasetType.GENERAL_MEDICAL]
        )
        
        # A√±adir columnas obligatorias y recomendadas
        for req in requirements:
            if req.requirement_level in [MedicalRequirement.MANDATORY, MedicalRequirement.RECOMMENDED]:
                matching_cols = self._find_columns_by_type(column_mappings, req.column_type)
                if matching_cols:
                    # Tomar la columna con mayor confianza
                    best_col = max(matching_cols, key=lambda x: column_mappings[x].confidence)
                    recommended.append(best_col)
        
        # Para COVID-19, limitar a 10 columnas como m√°ximo
        if dataset_type == DatasetType.COVID19 and len(recommended) > 10:
            # Ordenar por confianza y tomar las 10 mejores
            recommended.sort(key=lambda x: column_mappings[x].confidence, reverse=True)
            recommended = recommended[:10]
        
        # Para otros datasets, incluir columnas num√©ricas importantes
        elif dataset_type != DatasetType.COVID19:
            numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns
            for col in numeric_cols:
                if col not in recommended and len(recommended) < 15:  # L√≠mite flexible
                    recommended.append(col)
        
        return recommended
    
    def _find_columns_by_type(self, column_mappings: Dict[str, ColumnMapping], column_type: ColumnType) -> List[str]:
        """Encuentra columnas que coinciden con un tipo espec√≠fico"""
        return [col for col, mapping in column_mappings.items() if mapping.detected_type == column_type]
    
    def _has_column_type(self, column_mappings: Dict[str, ColumnMapping], column_type: ColumnType) -> bool:
        """Verifica si existe al menos una columna del tipo especificado"""
        return len(self._find_columns_by_type(column_mappings, column_type)) > 0
    
    def _validate_selection(self, selected_columns: List[str], dataset_type: DatasetType, column_mappings: Dict[str, ColumnMapping]) -> ColumnSelection:
        """Valida la selecci√≥n de columnas del usuario"""
        
        requirements = self.medical_requirements.get(
            dataset_type, 
            self.medical_requirements[DatasetType.GENERAL_MEDICAL]
        )
        
        missing_requirements = []
        recommendations = []
        
        # Verificar requisitos obligatorios
        for req in requirements:
            if req.requirement_level == MedicalRequirement.MANDATORY:
                matching_cols = [col for col in selected_columns if column_mappings[col].detected_type == req.column_type]
                if not matching_cols:
                    missing_requirements.append(f"Falta {req.description}")
        
        # Verificar n√∫mero m√≠nimo de columnas
        if len(selected_columns) < 3:
            missing_requirements.append("Seleccione al menos 3 columnas")
        
        # Generar recomendaciones
        if len(selected_columns) > 20:
            recommendations.append("Considere reducir el n√∫mero de columnas para mejor rendimiento")
        
        if dataset_type == DatasetType.COVID19 and len(selected_columns) > 10:
            recommendations.append("Para datasets COVID-19, se recomienda m√°ximo 10 columnas")
        
        # Calcular score de calidad
        quality_score = self._calculate_selection_quality(selected_columns, column_mappings, requirements)
        
        mandatory_fulfilled = len(missing_requirements) == 0
        
        return ColumnSelection(
            selected_columns=selected_columns,
            mandatory_fulfilled=mandatory_fulfilled,
            missing_requirements=missing_requirements,
            recommendations=recommendations,
            quality_score=quality_score
        )
    
    def _calculate_selection_quality(self, selected_columns: List[str], column_mappings: Dict[str, ColumnMapping], requirements: List[ColumnRequirement]) -> float:
        """Calcula un score de calidad para la selecci√≥n"""
        
        if not selected_columns:
            return 0.0
        
        total_score = 0.0
        max_score = 0.0
        
        # Score por cumplimiento de requisitos
        for req in requirements:
            weight = 1.0 if req.requirement_level == MedicalRequirement.MANDATORY else 0.5
            max_score += weight
            
            matching_cols = [col for col in selected_columns if column_mappings[col].detected_type == req.column_type]
            if matching_cols:
                # Score basado en la confianza de la mejor columna
                best_confidence = max(column_mappings[col].confidence for col in matching_cols)
                total_score += weight * best_confidence
        
        # Score por diversidad de tipos de columnas
        unique_types = set(column_mappings[col].detected_type for col in selected_columns)
        diversity_score = min(len(unique_types) / 5.0, 1.0)  # M√°ximo 5 tipos diferentes
        total_score += diversity_score
        max_score += 1.0
        
        return total_score / max_score if max_score > 0 else 0.0
