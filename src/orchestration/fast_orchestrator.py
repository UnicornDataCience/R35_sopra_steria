"""
Fast Medical Orchestrator - Optimizado para respuestas r√°pidas sin timeout
Separa las respuestas conversacionales directas de los workflows de agentes complejos.
"""

import time
import datetime
import os
import re
from typing import Dict, Any, Optional
import asyncio
import logging

# Importar el LLM configurado
try:
    from ..config.llm_config import unified_llm_config
    LLM_AVAILABLE = True
except ImportError:
    LLM_AVAILABLE = False

logger = logging.getLogger(__name__)

class FastMedicalOrchestrator:
    """
    Orquestador optimizado que evita timeouts separando:
    - Respuestas directas del LLM (r√°pidas)
    - Workflows de agentes (para tareas espec√≠ficas)
    """
    
    def __init__(self, agents: Dict[str, Any] = None):
        self.agents = agents or {}
        print(f"üöÄ [{datetime.datetime.now().strftime('%H:%M:%S')}] FastMedicalOrchestrator inicializado")
        
        # Debug de agentes disponibles
        if self.agents:
            agent_names = list(self.agents.keys())
            print(f"üîß [DEBUG] Agentes disponibles en FastOrchestrator: {agent_names}")
        else:
            print(f"‚ö†Ô∏è [DEBUG] No hay agentes disponibles en FastOrchestrator")
        
    
    
    def _clean_llm_response(self, content: str) -> str:
        """
        Limpia la respuesta del LLM eliminando etiquetas de razonamiento y formato no deseado.
        """
        if not content:
            return content
        
        # Eliminar etiquetas <think> completas
        content = re.sub(r'<think>.*?</think>\s*', '', content, flags=re.DOTALL | re.IGNORECASE)
        
        # Eliminar etiquetas <thinking> si existen
        content = re.sub(r'<thinking>.*?</thinking>\s*', '', content, flags=re.DOTALL | re.IGNORECASE)
        
        # Eliminar etiquetas de razonamiento que no se cerraron
        content = re.sub(r'<think>.*$', '', content, flags=re.DOTALL | re.IGNORECASE)
        content = re.sub(r'<thinking>.*$', '', content, flags=re.DOTALL | re.IGNORECASE)
        
        # Limpiar m√∫ltiples espacios y saltos de l√≠nea
        content = re.sub(r'\n\s*\n', '\n\n', content)
        content = re.sub(r'^\s+|\s+$', '', content)
        
        # Si la respuesta est√° vac√≠a despu√©s de limpiar, devolver mensaje por defecto
        if not content.strip():
            content = "Lo siento, no pude generar una respuesta clara. ¬øPuedes reformular tu pregunta?"
        
        return content

    async def _execute_agent_workflow(self, workflow_type: str, user_input: str, context: dict) -> Dict[str, Any]:
        """
        Ejecuta workflows espec√≠ficos de agentes para tareas complejas.
        """
        start_time = time.time()
        print(f"üîß [{datetime.datetime.now().strftime('%H:%M:%S')}] Ejecutando workflow: {workflow_type}")
        
        try:
            if workflow_type == "analyzer_workflow":
                print(f"üîç [DEBUG] Buscando agente 'analyzer' en: {list(self.agents.keys())}")
                if "analyzer" in self.agents:
                    print(f"‚úÖ [DEBUG] Agente analyzer encontrado: {type(self.agents['analyzer'])}")
                    
                    # Verificar si hay dataset en contexto
                    if context and context.get("dataframe") is not None:
                        print(f"üìä [DEBUG] Dataset encontrado para an√°lisis")
                        
                        # Ejecutar an√°lisis universal primero
                        try:
                            from ..adapters.universal_dataset_detector import UniversalDatasetDetector
                            detector = UniversalDatasetDetector()
                            df = context["dataframe"]
                            
                            print(f"üî¨ [DEBUG] Ejecutando an√°lisis universal...")
                            universal_analysis = detector.analyze_dataset(df)
                            
                            # Agregar el an√°lisis universal al contexto
                            context["universal_analysis"] = universal_analysis
                            print(f"‚úÖ [DEBUG] An√°lisis universal completado")
                            
                        except Exception as e:
                            print(f"‚ùå [DEBUG] Error en an√°lisis universal: {e}")
                            return {
                                "message": f"‚ùå **Error en an√°lisis universal**: {str(e)}\n\nNo se pudo completar el an√°lisis autom√°tico del dataset.",
                                "agent": "system",
                                "route": "agent_error"
                            }
                    
                    # Usar el m√©todo process() est√°ndar como los otros agentes
                    response = await self.agents["analyzer"].process(user_input, context)
                    response["route"] = "agent_workflow"
                    return response
                else:
                    print(f"‚ùå [DEBUG] Agente analyzer NO encontrado")
                    return {
                        "message": "üìä **An√°lisis de datos solicitado**\n\nPara realizar un an√°lisis completo, necesito que el agente analizador est√© disponible. Actualmente estoy en modo simplificado.\n\n**Capacidades de an√°lisis:**\n‚Ä¢ Estad√≠sticas descriptivas\n‚Ä¢ Detecci√≥n de patrones m√©dicos\n‚Ä¢ Identificaci√≥n de outliers\n‚Ä¢ Correlaciones cl√≠nicas\n\nPor favor, verifica la configuraci√≥n de los agentes.",
                        "agent": "system",
                        "route": "agent_fallback"
                    }
                    
            elif workflow_type == "generator_workflow":
                if "generator" in self.agents:
                    # Generar datos sint√©ticos
                    response = await self.agents["generator"].process(user_input, context)
                    
                    # Post-procesar datos sint√©ticos para validaci√≥n JSON
                    if "synthetic_data" in response:
                        response = self._post_process_synthetic_data(response, context)
                    
                    response["route"] = "agent_workflow"
                    return response
                else:
                    return {
                        "message": "üè≠ **Generaci√≥n de datos sint√©ticos solicitada**\n\nPara generar datos sint√©ticos, necesito que el agente generador est√© disponible. Actualmente estoy en modo simplificado.\n\n**Modelos disponibles:**\n‚Ä¢ CTGAN - Para datos mixtos\n‚Ä¢ TVAE - Para preservar distribuciones\n‚Ä¢ SDV - Para m√°xima calidad\n\nPor favor, verifica la configuraci√≥n de los agentes.",
                        "agent": "system",
                        "route": "agent_fallback"
                    }
                    
            elif workflow_type == "validator_workflow":
                if "validator" in self.agents:
                    response = await self.agents["validator"].process(user_input, context)
                    response["route"] = "agent_workflow"
                    return response
                else:
                    return {
                        "message": "üîç **Validaci√≥n de datos solicitada**\n\nPara validar la coherencia cl√≠nica, necesito que el agente validador est√© disponible. Actualmente estoy en modo simplificado.\n\n**Validaciones disponibles:**\n‚Ä¢ Coherencia m√©dica\n‚Ä¢ Rangos de valores\n‚Ä¢ Patrones cl√≠nicos\n‚Ä¢ Calidad de datos\n\nPor favor, verifica la configuraci√≥n de los agentes.",
                        "agent": "system",
                        "route": "agent_fallback"
                    }
                    
            elif workflow_type == "evaluator_workflow":
                print(f"üìä [DEBUG] Buscando agente 'evaluator' en: {list(self.agents.keys())}")
                if "evaluator" in self.agents:
                    print(f"‚úÖ [DEBUG] Agente evaluator encontrado: {type(self.agents['evaluator'])}")
                    
                    # Verificar que hay datos originales y sint√©ticos para evaluar
                    original_data = context.get("dataframe")
                    synthetic_data = context.get("synthetic_data")
                    
                    if original_data is None:
                        return {
                            "message": "‚ùå **Error**: No hay dataset original cargado.\n\nPara evaluar calidad, necesito:\n‚Ä¢ Dataset original cargado\n‚Ä¢ Datos sint√©ticos generados\n\n**Pasos sugeridos:**\n1. Sube un dataset\n2. Genera datos sint√©ticos\n3. Solicita evaluaci√≥n",
                            "agent": "system",
                            "route": "evaluation_error"
                        }
                    
                    if synthetic_data is None:
                        return {
                            "message": "‚ùå **Error**: No hay datos sint√©ticos generados.\n\nPara evaluar calidad, necesito datos sint√©ticos previos.\n\n**Pasos sugeridos:**\n1. Genera datos sint√©ticos primero\n2. Luego solicita evaluaci√≥n\n\n**Comando ejemplo:**\n`Genera 500 registros con CTGAN`",
                            "agent": "system",
                            "route": "evaluation_error"
                        }
                    
                    print(f"üìä [DEBUG] Datos disponibles para evaluaci√≥n:")
                    print(f"   - Original: {len(original_data)} filas")
                    print(f"   - Sint√©tico: {len(synthetic_data)} filas")
                    
                    response = await self.agents["evaluator"].process(user_input, context)
                    response["route"] = "agent_workflow"
                    return response
                else:
                    print(f"‚ùå [DEBUG] Agente evaluator NO encontrado")
                    return {
                        "message": "üìä **Evaluaci√≥n de calidad solicitada**\n\nPara evaluar la utilidad de datos sint√©ticos, necesito que el agente evaluador est√© disponible. Actualmente estoy en modo simplificado.\n\n**M√©tricas de evaluaci√≥n:**\n‚Ä¢ Fidelidad estad√≠stica\n‚Ä¢ Utilidad para ML\n‚Ä¢ Preservaci√≥n de patrones\n‚Ä¢ Score de privacidad\n‚Ä¢ Calidad de entidades m√©dicas\n\nPor favor, verifica la configuraci√≥n de los agentes.",
                        "agent": "system",
                        "route": "agent_fallback"
                    }
                    
            elif workflow_type == "simulator_workflow":
                print(f"üè• [DEBUG] Buscando agente 'simulator' en: {list(self.agents.keys())}")
                if "simulator" in self.agents:
                    print(f"‚úÖ [DEBUG] Agente simulator encontrado: {type(self.agents['simulator'])}")
                    
                    # Verificar que hay datos validados para la simulaci√≥n
                    synthetic_data = context.get("synthetic_data")
                    original_data = context.get("dataframe")
                    
                    # Priorizar datos sint√©ticos validados, pero permitir simulaci√≥n con datos originales
                    simulation_data = synthetic_data if synthetic_data is not None else original_data
                    
                    if simulation_data is None:
                        return {
                            "message": "‚ùå **Error**: No hay datos disponibles para simulaci√≥n.\n\nPara simular evoluci√≥n de pacientes, necesito:\n‚Ä¢ Dataset cargado (original o sint√©tico)\n‚Ä¢ Preferiblemente datos sint√©ticos validados\n\n**Pasos sugeridos:**\n1. Sube un dataset\n2. Opcionalmente genera datos sint√©ticos\n3. Valida los datos\n4. Solicita simulaci√≥n\n\n**Comando ejemplo:**\n`Simula la evoluci√≥n de estos pacientes`",
                            "agent": "system",
                            "route": "simulation_error"
                        }
                    
                    print(f"üè• [DEBUG] Datos disponibles para simulaci√≥n:")
                    print(f"   - Datos de simulaci√≥n: {len(simulation_data)} filas")
                    print(f"   - Tipo de datos: {'sint√©ticos' if synthetic_data is not None else 'originales'}")
                    
                    # Actualizar contexto con los datos de simulaci√≥n
                    context["synthetic_data"] = simulation_data
                    
                    response = await self.agents["simulator"].process(user_input, context)
                    response["route"] = "agent_workflow"
                    return response
                else:
                    print(f"‚ùå [DEBUG] Agente simulator NO encontrado")
                    return {
                        "message": "üè• **Simulaci√≥n de pacientes solicitada**\n\nPara simular la evoluci√≥n temporal de pacientes, necesito que el agente simulador est√© disponible. Actualmente estoy en modo simplificado.\n\n**Simulaciones disponibles:**\n‚Ä¢ Evoluci√≥n hospitalaria\n‚Ä¢ Progresi√≥n cl√≠nica temporal\n‚Ä¢ Simulaci√≥n de visitas\n‚Ä¢ Cambios en biomarcadores\n‚Ä¢ Respuesta a tratamientos\n\n**Enfermedades soportadas:**\n‚Ä¢ COVID-19 (simulaci√≥n espec√≠fica)\n‚Ä¢ Casos generales (todas las especialidades)\n\nPor favor, verifica la configuraci√≥n de los agentes.",
                        "agent": "system",
                        "route": "agent_fallback"
                    }
            else:
                return {
                    "message": f"‚ùå **Workflow no reconocido**: {workflow_type}\n\nWorkflows disponibles:\n‚Ä¢ analyzer_workflow\n‚Ä¢ generator_workflow\n‚Ä¢ validator_workflow\n‚Ä¢ evaluator_workflow\n‚Ä¢ simulator_workflow",
                    "agent": "system",
                    "route": "error"
                }
                
        except Exception as e:
            end_time = time.time()
            print(f"‚ùå [{datetime.datetime.now().strftime('%H:%M:%S')}] Error en workflow {workflow_type} despu√©s de {end_time - start_time:.2f}s: {e}")
            return {
                "message": f"‚ùå **Error en {workflow_type}**: {str(e)}\n\nPor favor, intenta de nuevo o usa un comando m√°s simple.",
                "agent": "system",
                "route": "error",
                "error": True
            }
    
    async def process_user_input(self, user_input: str, context: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        Punto de entrada principal. Delega la detecci√≥n de intenci√≥n al Coordinador
        y luego enruta al workflow correspondiente.
        """
        start_time = time.time()
        print(f"üéØ [{datetime.datetime.now().strftime('%H:%M:%S')}] FastOrchestrator procesando: {user_input[:50]}...")
        
        context = context or {}
        
        # üîç PASO 1: Usar SIEMPRE el CoordinatorAgent para detectar la intenci√≥n
        coordinator = self.agents.get("coordinator")
        if not coordinator:
            return {
                "message": "‚ùå Error cr√≠tico: Agente Coordinador no encontrado.",
                "agent": "system",
                "error": True
            }
            
        coordinator_response = await coordinator.process(user_input, context)
        intention = coordinator_response.get("intention")
        agent_name = coordinator_response.get("agent")
        
        print(f"üéØ Intenci√≥n detectada por Coordinador: '{intention}' para agente '{agent_name}'")

        # üöÄ PASO 2: Ejecutar ruta correspondiente
        if intention == "conversacion":
            # RUTA R√ÅPIDA: Es una pregunta directa, devolver la respuesta del coordinador
            response = coordinator_response
            response["route"] = "direct_llm_response"
        
        elif intention == "comando" and agent_name != "coordinator":
            # RUTA DE AGENTES: Workflow espec√≠fico
            workflow_name = f"{agent_name}_workflow"
            response = await self._execute_agent_workflow(workflow_name, user_input, context)
        
        else:
            # Fallback si la respuesta del coordinador no es clara
            response = {
                "message": coordinator_response.get("message", "No estoy seguro de c√≥mo proceder. ¬øPuedes reformular tu petici√≥n?"),
                "agent": "system",
                "route": "error"
            }

        end_time = time.time()
        total_time = end_time - start_time
        response["total_time"] = f"{total_time:.2f}s"
        
        print(f"‚úÖ [{datetime.datetime.now().strftime('%H:%M:%S')}] FastOrchestrator completado en {total_time:.2f}s")
        return response
    
    def process_user_input_sync(self, user_input: str, context: Dict[str, Any] = None) -> Dict[str, Any]:
        """Versi√≥n s√≠ncrona que usa el wrapper async-safe"""
        try:
            from ..utils.streamlit_async_wrapper import run_async_safe
            return run_async_safe(self.process_user_input, user_input, context)
        except ImportError:
            # Fallback simple si no hay wrapper
            try:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    return loop.run_until_complete(self.process_user_input(user_input, context))
                finally:
                    loop.close()
            except Exception as e:
                return {
                    "message": f"‚ùå Error ejecutando de forma s√≠ncrona: {str(e)}",
                    "agent": "system",
                    "error": True
                }
    
    def _post_process_synthetic_data(self, response: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        """
        Post-procesa los datos sint√©ticos para prepararlos para validaci√≥n JSON.
        Aplica el medical_data_adapter para convertir al formato esperado.
        """
        try:
            synthetic_data = response.get("synthetic_data")
            if synthetic_data is None:
                return response
            
            print("üîÑ Post-procesando datos sint√©ticos para validaci√≥n JSON...")
            
            # Importar el adaptador m√©dico
            from ..adapters.medical_data_adapter import UniversalMedicalAdapter
            adapter = UniversalMedicalAdapter()
            
            # Obtener mapeos de campo del contexto si est√°n disponibles
            analysis_results = context.get("analysis_results", {})
            field_mappings = analysis_results.get("field_mappings", {})
            
            # Preparar datos para validaci√≥n JSON
            json_ready_data = adapter.prepare_for_json_validation(
                synthetic_data, 
                field_mappings
            )
            
            # Actualizar la respuesta con los datos procesados
            response["synthetic_data"] = json_ready_data
            
            # Agregar informaci√≥n sobre el post-procesamiento
            generation_info = response.get("generation_info", {})
            generation_info["json_processed"] = True
            generation_info["json_processing_timestamp"] = datetime.datetime.now().isoformat()
            response["generation_info"] = generation_info
            
            # Actualizar el mensaje para indicar el post-procesamiento
            if "message" in response:
                response["message"] += "\n\nüîß **Post-procesamiento aplicado:** Datos preparados para validaci√≥n JSON esquema m√©dico."
            
            print("‚úÖ Post-procesamiento completado - datos listos para validaci√≥n JSON")
            return response
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error en post-procesamiento de datos sint√©ticos: {e}")
            # Si falla el post-procesamiento, devolver los datos originales
            return response
